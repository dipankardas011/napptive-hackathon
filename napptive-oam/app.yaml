
---
apiVersion: core.oam.dev/v1beta1
kind: ComponentDefinition
metadata:
  name: configmap
spec:
  schematic:
    cue:
      template: |
        parameter: {
          // +usage=Name of the ConfigMap
          name: string
          // +usage=Key-value pairs to be stored in the ConfigMap
          data: [string]: string
          // +usage=Key-value pairs for labels
          labels: [string]: string
        }
        output: {
          apiVersion: "v1"
          kind: "ConfigMap"
          metadata: {
            name: parameter.name
            labels: parameter.labels
          }
          data: parameter.data
        }

---
apiVersion: core.oam.dev/v1beta1
kind: Application
metadata:
  name: hackathon-application
spec:
  components:
   
    - name: redis-configuration
      type: configmap
      properties:
        name: redis-config
        labels:
          role: redis
        data:
          redis.conf: |-
            bind 0.0.0.0
            port 6379
            tcp-backlog 511
            masterauth a-very-strong-password
            requirepass a-very-strong-password
            protected-mode no
            timeout 0
            tcp-keepalive 300
            pidfile /var/run/redis_6379.pid
            loglevel notice
            logfile ""
            dbfilename dump.rdb
            dir /data/
            replica-read-only yes
            appendfsync everysec


    - name: redis-service
      type: k8s-objects
      properties:
        objects:
          - apiVersion: v1
            kind: Service
            metadata:
              name: redis
            spec:
              selector:
                app: redis
              type: ClusterIP
              clusterIP: None
              ports:
                - name: redis
                  port: 6379
                  targetPort: 6379

    - name: redis
      type: statefulservice
      properties:
        replicas: 1
        image: redis:6.2.3-alpine
        cmd: ["redis-server"]
        args: ["/etc/redis/redis.conf"]
        name: redis
        ports:
          - port: 6379
            protocol: TCP
        volumeMounts:
          pvc:
            - name: data
              mountPath: /data
              size: 500Mi
              claimName: redis-pvc
      traits:
        - type: "init-container"
          properties:
            name: config
            image: redis:6.2.3-alpine
            cmd: 
              - "sh" 
              - "-c"
            args:
              - |
                cp /tmp/redis/redis.conf /etc/redis/redis.conf
                
                echo "finding master..."
                MASTER_FDQN=`hostname  -f | sed -e 's/redis-[0-9]\./redis-0./'`
                if [ "$(redis-cli -h sentinel -p 5000 ping)" != "PONG" ]; then
                  echo "master not found, defaulting to redis-0"

                  if [ "$(hostname)" == "redis-0" ]; then
                    echo "this is redis-0, not updating config..."
                  else
                    echo "updating redis.conf..."
                    echo "slaveof $MASTER_FDQN 6379" >> /etc/redis/redis.conf
                  fi
                else
                  echo "sentinel found, finding master"
                  MASTER="$(redis-cli -h sentinel -p 5000 sentinel get-master-addr-by-name mymaster | grep -E '(^redis-\d{1,})|([0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3})')"
                  echo "master found : $MASTER, updating redis.conf"
                  echo "slaveof $MASTER 6379" >> /etc/redis/redis.conf
                fi
            volumeMounts:
              emptyDir:
                - name: redis-config
                  mountPath: /etc/redis/
              configMap:
                - name: config
                  mountPath: "/tmp/redis/"
                  cmName: redis-config
            mountName: "redis-config"
            appMountPath:  "/etc/redis"
            initMountPath: "/tmp/redis/"

    - name: http-server
      type: webservice
      properties:
        image: docker.io/dipugodocker/hackathon-napptive:1.0
        ports:
          - port: 8080
            expose: true

      traits:
        # - type: resource # Set to resource
        #   properties:
        #     requests: # (Optional) Specify resources in requests
        #       cpu: 0.05 # (Optional) Specify the amount of cpu for requests. 1 by default
        #       memory: "10Mi" # (Optional) Specify the amount of memory for requests. 2048Mi by default
        #     limits: # (Optional) Specify resources in limits
        #       cpu: 0.25 # (Optional) Specify the amount of cpu for limits. 1 by default
        #       memory: "200Mi" # (Optional) Specify the amount of memory for limits. 2048Mi by default

        - type: napptive-ingress
          properties:
            port: 8080
            path: /

        - type: scaler
          properties:
            replicas: 2
  workflows:
    steps:
      - name: redis-config
        type: apply-component
        properties:
          component: redis-configuration
      - name: redis-service
        type: apply-component
        properties:
          component: redis-service
      - name: redis-server
        type: apply-component
        properties:
          component: redis
      - name: http-server
        type: apply-component
        properties:
          component: http-server
